@page "/Security/Rol"

@using Blazored.LocalStorage
@using IntranetCalidad.Shared.ComponentModels
@using IntranetCalidad.Shared.Modals
@using IntranetCalidad.Shared.Buttons
@using IntranetCalidad.Shared.Constants
@using IntranetCalidad.Validate
@using CalidadDominioDTO
@* @using static CalidadDominioDTO.MantenimientoDTO *@
@using static CalidadDominioDTO.SeguridadDTO

@inject ILocalStorageService _session
@inject NavigationManager _navigation
@inject ProjectHttpClient _httpClient
@inject SweetAlertService Swal

<style>
    .column {
        width: 50%;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }
</style>
<article class="art">
    <h1 class="tituloPagina" style="color: #1C2F24">Roles</h1>
    <div class="input-group" style="width: 45%;">
        <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Primary" OnClick="New" Size="ButtonSize.Medium" Text="Agregar" />
    </div>
    <PhModal @ref="modalRol">
        <Title>Roles</Title>
        <Body>
            <EditForm Model="rolDTOForm">
                <div class="form-group row" style="margin-bottom:2%; color:#1C2F24">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">Roles</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control form-control-lg" id="det" @bind-value="rolDTOForm.nombrePerfil" placeholder="Ingrese el nombre del Rol">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <div class="col-sm-2">
                        <label for="chek" class="col-sm-2 col-form-label col-form-label-lg">Estado</label>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-check form-switch col-sm-2 col-form-label col-form-label-lg">
                            <input class="form-check-input" @bind-value="@rolDTOForm.estadoPerfil" checked="@rolDTOForm.estadoPerfil" type="checkbox" id="flexSwitchCheckChecked">
                            @if (@rolDTOForm.estadoPerfil == true)
                            {
                                <label class="form-check-label" for="flexSwitchCheckChecked">Activo</label>
                            }
                            else
                            {
                                <label class="form-check-label" for="flexSwitchCheckChecked">Inactivo</label>
                            }
                        </div>
                    </div>
                </div>
            </EditForm>
        </Body>
        <Footer>
            <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Success" @onclick="sendData" Size="ButtonSize.Medium" Text="Guardar" isConfirmation="true" />
            <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Danger" @onclick="() => modalRol.CloseModal()" Size="ButtonSize.Medium" Text="Cerrar" />
        </Footer>
    </PhModal>
    <div>
        <br />
        <PhTable @ref="_table" TPost="PerfilDTO" isRefresh="true" TReturn="PerfilDTO" Body="new PerfilDTO()" EndPoint="@EndPointStr"
                 SearchDefinition="@(new[]
                 {
                    "nombrePerfil",
                    "descripcionEstadoPerfil"
                 })">
            <PhTableColumnHeaders>
                <PhTableColumn Style="width:40%;" Value="Nombre del Rol" IsHeader="true" />
                <PhTableColumn Style="width:20%;" Value="Estado del Rol" IsHeader="true" />
            </PhTableColumnHeaders>
            <PhTableColumnValues>
                <PhTableColumn Value="@context.nombrePerfil" Style="width:40%;" />
                @if (context.estadoPerfil == true)
                {
                    <PhTableColumn StatusColor="var(--ph-green)" Style="width:20%;" Value="@context.descripcionEstadoPerfil" />
                }
                else
                {
                    <PhTableColumn StatusColor="var(--ph-red)" Style="width:20%;" Value="@context.descripcionEstadoPerfil" />
                }
            </PhTableColumnValues>
            <PhTableActions>
                <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Primary" @onclick="@(() => Update(context))" Size="ButtonSize.Small" Text="Editar" />

            </PhTableActions>

        </PhTable>
        <PhNotification @ref="@modalNotification">
        </PhNotification>

    </div>
    <Loading @ref="loader"></Loading>
</article>


@code {
    Loading loader { get; set; } = new();

    private PhTable<PerfilDTO, PerfilDTO>? _table = new();
    private PhModal? modalRol { get; set; } = new();
    private PhNotification modalNotification { get; set; } = new();
    PerfilDTO rolDTOForm = new PerfilDTO();
    PerfilDTO rolDTO { get; set; } = null!;
    private string EndPointStr { get; set; } = null!;
    string mensajeTransaccion = string.Empty;
    string iconoMostrar = string.Empty;

    protected override async void OnInitialized()
    {
        EndPointStr = EndPoints.obtenerRoles;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var item = await _session.GetItemAsync<MenuDTO[]>("_userMenu");
            Validate validate = new Validate();
            if (!validate.isValid("./Security/Rol", item))
            {
                _navigation.NavigateTo("./Home/Error");
            }
            await loader.Close();
        }
    }
    private async Task New()
    {
        
       rolDTOForm = new PerfilDTO();
       rolDTOForm.estadoPerfil = true;
       rolDTOForm.codigoPerfil = 0;
       await modalRol.NewModal();

    }
    private async Task sendData()
    {
        await loader.Show();
        string mensajeTransaccion = string.Empty;
        string iconoMostrar = string.Empty;

        try
        {
            if (rolDTOForm.nombrePerfil == null || rolDTOForm.nombrePerfil == string.Empty)
            {
                await loader.Close();
                mensajeTransaccion = "El nombre del perfil debe ser ingresado";
                iconoMostrar = "error";
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        ConfirmButtonColor = "#025833",
                        Title = "Intranet Calidad",
                        Text = mensajeTransaccion,
                        Icon = iconoMostrar
                    });
                return;
            }

            var postRequest = new HttpRequestMessage(HttpMethod.Post, EndPoints.grabarRoles)
                {
                    Content = JsonContent.Create(rolDTOForm)
                };
            var postResponse = await _httpClient.SendAsync(postRequest);
            if (postResponse.IsSuccessStatusCode)
            {
                var returnType = await postResponse.Content.ReadFromJsonAsync<RespuestaDTO>()!;
                if (returnType.CodigoError == 0)
                {
                    loadTable();
                    mensajeTransaccion = returnType.MensajeError;
                    iconoMostrar = "success";
                }
                else
                {
                    mensajeTransaccion = returnType.MensajeError;
                    iconoMostrar = "error";
                }
                await modalRol.CloseModal();
                await loader.Close();
            }
            else
            {
                //await modalNotification.ErrorModal("Error de servicio");
                mensajeTransaccion = "Error de servicio";
                iconoMostrar = "error";
                await modalRol.CloseModal();
                await loader.Close();
            }

            await Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = mensajeTransaccion,
                    Icon = iconoMostrar
                });

        }
        catch (HttpRequestException e)
        {
            await modalNotification.ErrorModal(e.Message.ToString());
            await modalRol.CloseModal();
            await loader.Close();
        }
    }

    private async Task Update(PerfilDTO rolDTO)
    {
        rolDTOForm = rolDTO;
        await modalRol.UpdateModal();
        StateHasChanged();
    }

    private async void loadTable()
    {
        _table.Body = rolDTOForm;
        await _table!.GetDataAsync();
        await loader.Close();
    }

}
