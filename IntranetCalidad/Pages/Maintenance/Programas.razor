@page "/Maintenance/Programas"

@using Blazored.LocalStorage
@using IntranetCalidad.Shared.ComponentModels
@using IntranetCalidad.Shared.Modals
@using IntranetCalidad.Shared.Buttons
@using IntranetCalidad.Shared.Constants
@using IntranetCalidad.Validate
@using CalidadDominioDTO
@using static CalidadDominioDTO.MantenimientoDTO
@using static CalidadDominioDTO.SeguridadDTO

@inject ILocalStorageService _session
@inject NavigationManager _navigation
@inject ProjectHttpClient _httpClient
@inject SweetAlertService Swal

<style>
    .column {
        width: 50%;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }
</style>

<article class="art">
    <h1 class="tituloPagina" style="color: #1C2F24">Programas</h1>
    <div class="input-group" style="width: 45%;">
        <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Primary" OnClick="New" Size="ButtonSize.Medium" Text="Agregar" />
    </div>

    <PhModal @ref="modalPrograma">
        <Title>Programas</Title>
        <Body>
            <EditForm Model="programasDTOForm">
                <div class="form-group row" style="margin-bottom:2%; color:#1C2F24">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">Nombre</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control form-control-lg" id="det" @bind-value="programasDTOForm.nombrePrograma" placeholder="Ingrese el nombre del programa">
                    </div>
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">Código Alfanumérico</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control form-control-lg" id="det" @bind-value="programasDTOForm.codigoProgramaAlfanumerico" placeholder="Ingrese el código del programa">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">Codigo Certificacion</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control form-control-lg" id="det" @bind-value="programasDTOForm.codigoCertificacion" placeholder="Ingrese el codigo de certificación">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <div class="col-sm-2">
                        <label for="chek" class="col-sm-2 col-form-label col-form-label-lg">Estado</label>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-check form-switch col-sm-2 col-form-label col-form-label-lg">
                            <input class="form-check-input" @bind-value="@programasDTOForm.estadoPrograma" checked="@programasDTOForm.estadoPrograma" type="checkbox" id="flexSwitchCheckChecked">
                            @if (@programasDTOForm.estadoPrograma == true)
                            {
                                <label class="form-check-label" for="flexSwitchCheckChecked">Activo</label>
                            }
                            else
                            {
                                <label class="form-check-label" for="flexSwitchCheckChecked">Inactivo</label>
                            }
                        </div>
                    </div>
                </div>
            </EditForm>
        </Body>
        <Footer>
            <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Success" @onclick="sendData" Size="ButtonSize.Medium" Text="Guardar" isConfirmation="true" />
            <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Danger" @onclick="() => modalPrograma.CloseModal()" Size="ButtonSize.Medium" Text="Cerrar" />
        </Footer>
    </PhModal>
    <div>
        <br />
        <PhTable @ref="_table" TPost="ProgramasDTO" isRefresh="true" TReturn="ProgramasDTO" Body="new ProgramasDTO()" EndPoint="@EndPointStr"
                 SearchDefinition="@(new[]
                 {
                    "nombrePrograma",
                    "descripcionEstadoPrograma"
                 })">
            <PhTableColumnHeaders>
                <PhTableColumn Style="width:25%;" Value="Codigo alfanumerico" IsHeader="true" />
                <PhTableColumn Style="width:25%;" Value="Programa" IsHeader="true" />
                <PhTableColumn Style="width:25%;" Value="Certificacion" IsHeader="true" />
                <PhTableColumn Style="width:25%;" Value="Estado del Programa" IsHeader="true" />
            </PhTableColumnHeaders>
            <PhTableColumnValues>
                <PhTableColumn Value="@context.codigoProgramaAlfanumerico" Style="width:40%;" />
                <PhTableColumn Value="@context.nombrePrograma" Style="width:40%;" />
                <PhTableColumn Value="@Convert.ToString(context.codigoCertificacion)" Style="width:40%;" />
                @if (context.estadoPrograma == true)
                {
                    <PhTableColumn StatusColor="var(--ph-green)" Style="width:20%;" Value="@context.descripcionEstadoPrograma" />
                }
                else
                {
                    <PhTableColumn StatusColor="var(--ph-red)" Style="width:20%;" Value="@context.descripcionEstadoPrograma" />
                }
            </PhTableColumnValues>
            <PhTableActions>
                <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Primary" @onclick="@(() => Update(context))" Size="ButtonSize.Small" Text="Editar" />

            </PhTableActions>

        </PhTable>
        <PhNotification @ref="@modalNotification">
        </PhNotification>

    </div>
    <Loading @ref="loader"></Loading>
</article>


@code {
    Loading loader { get; set; } = new();

    private PhTable<ProgramasDTO, ProgramasDTO>? _table = new();
    private PhModal? modalPrograma { get; set; } = new();
    private PhNotification modalNotification { get; set; } = new();
    ProgramasDTO programasDTOForm = new ProgramasDTO();
    ProgramasDTO programasDTO { get; set; } = null!;
    private string EndPointStr { get; set; } = null!;
    CertificacionesDTO certificacionesDTO = null!;

    protected override async void OnInitialized()
    {
        EndPointStr = EndPoints.obtenerProgramas;

        // var result = await _httpClient.PostAsJsonAsync<GruposDTO>
        //        (EndPointStr, grupoDTOForm);

        // _table.Data = result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var item = await _session.GetItemAsync<MenuDTO[]>("_userMenu");
            Validate validate = new Validate();
            if (!validate.isValid("./Maintenance/TipoCacao", item))
            {
                _navigation.NavigateTo("./Home/Error");
            }
            await loader.Close();
        }
    }

    private async Task New()
    {
        programasDTOForm = new ProgramasDTO();
        programasDTOForm.estadoPrograma = true;
        programasDTOForm.codigoPrograma = 0;
        await modalPrograma.NewModal();
    }

    private async Task sendData()
    {
        await loader.Show();
        string mensajeTransaccion = string.Empty;
        string iconoMostrar = string.Empty;

        try
        {
            // tipoCacaoDTOForm.usuarioTransaccion = await _session.GetItemAsync<string>("codigoUsuario");
            // seccionDTOForm.equipoTransaccion = await _session.GetItemAsync<string>("equipoTransaccion");
            var postRequest = new HttpRequestMessage(HttpMethod.Post, EndPoints.grabarProgramas)
                {
                    Content = JsonContent.Create(programasDTOForm)
                };
            var postResponse = await _httpClient.SendAsync(postRequest);
            if (postResponse.IsSuccessStatusCode)
            {
                var returnType = await postResponse.Content.ReadFromJsonAsync<RespuestaDTO>()!;
                if (returnType.CodigoError == 0)
                {
                    await _table!.GetDataAsync();
                    mensajeTransaccion = returnType.MensajeError;
                    iconoMostrar = "success";
                }
                else
                {
                    mensajeTransaccion = returnType.MensajeError;
                    iconoMostrar = "error";
                }
                await modalPrograma.CloseModal();
                await loader.Close();
            }
            else
            {
                //await modalNotification.ErrorModal("Error de servicio");
                mensajeTransaccion = "Error de servicio";
                iconoMostrar = "error";
                await modalPrograma.CloseModal();
                await loader.Close();
            }

            await Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "var(--ph-skyblue)",
                    Title = "Intranet Lotería Nacional",
                    Text = mensajeTransaccion,
                    Icon = iconoMostrar
                });

        }
        catch (HttpRequestException e)
        {
            await modalNotification.ErrorModal(e.Message.ToString());
            await modalPrograma.CloseModal();
            await loader.Close();
        }
    }

    private async Task Update(ProgramasDTO programasDTO)
    {
        programasDTOForm = programasDTO;
        await modalPrograma.UpdateModal();
        StateHasChanged();
    }

}
