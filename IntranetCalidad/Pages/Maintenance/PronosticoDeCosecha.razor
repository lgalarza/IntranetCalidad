@page "/Maintenance/PronosticoDeCosecha"

@using Blazored.LocalStorage
@using IntranetCalidad.Shared.ComponentModels
@using IntranetCalidad.Shared.Modals
@using IntranetCalidad.Shared.Buttons
@using IntranetCalidad.Shared.Constants
@using IntranetCalidad.Validate
@using CalidadDominioDTO
@using static CalidadDominioDTO.MantenimientoDTO
@using static CalidadDominioDTO.SeguridadDTO

@inject ILocalStorageService _session
@inject NavigationManager _navigation
@inject ProjectHttpClient _httpClient
@inject SweetAlertService Swal

<style>
    .column {
        width: 50%;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }
</style>

<article class="art">
    <h1 class="tituloPagina" style="color: #1C2F24">Pronóstico de cosecha</h1>
    <div class="input-group" style="width: 45%; ">
        <Combo TItem="DetalleCatalogoDTO" text="nombreCatalogo" Data="Data" Identifier="comboModZona" placeholder="Seleccione la zona" selectValue="dtSelectZona" value="codigoCatalogo" ValueChanged="ValueChange">
        </Combo>
    </div>
    <div class="input-group" style="width: 45%;">
        <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Primary" OnClick="New" Size="ButtonSize.Medium" Text="Agregar" />
    </div>
    <PhModal @ref="modalPronosticoCosecha">
        <Title>Pronóstico de cosecha</Title>
        <Body>
            <EditForm Model="pronosticoCosechaDTOForm">
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Enero</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det1" value="@valorEnero" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorEnero(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Febrero</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det2" value="@valorFebrero" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorFebrero(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Marzo</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det3" value="@valorMarzo" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorMarzo(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Abril</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det4" value="@valorAbril" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorAbril(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Mayo</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det5" value="@valorMayo" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorMayo(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Junio</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det6" value="@valorJunio" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorJunio(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Julio</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det7" value="@valorJulio" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorJulio(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Agosto</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det8" value="@valorAgosto" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorAgosto(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Septiembre</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det9" value="@valorSeptiembre" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorSeptiembre(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Octubre</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det10" value="@valorOctubre" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorOctubre(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Noviembre</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det11" value="@valorNoviembre" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorNoviembre(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Diciembre</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det12" value="@valorDiciembre" placeholder="Ingrese el porcentaje el mes" onchange="@((Microsoft.AspNetCore.Components.ChangeEventArgs e) => {CambioValorDiciembre(e); StateHasChanged();})">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Factor Ajuste</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det13" @bind-value="pronosticoCosechaDTOForm.factorAjuste" placeholder="Ingrese el factor del ajuste permitido">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">% Total</label>
                    <div class="col-sm-10">
                        <input type="number" min="0" max="100" id="det14" @bind-value="@valorTotal" readonly="readonly">
                    </div>
                </div>
                <div class="form-group row" style="margin-bottom:2%;">
                    <div class="col-sm-2">
                        <label for="chek" class="col-sm-2 col-form-label col-form-label-lg">Estado</label>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-check form-switch col-sm-2 col-form-label col-form-label-lg">
                            <input class="form-check-input" @bind-value="@pronosticoCosechaDTOForm.estadoPronosticoCosecha" checked="@pronosticoCosechaDTOForm.estadoPronosticoCosecha" type="checkbox" id="flexSwitchCheckChecked">
                            @if (@pronosticoCosechaDTOForm.estadoPronosticoCosecha == true)
                            {
                                <label class="form-check-label" for="flexSwitchCheckChecked">Activo</label>
                            }
                            else
                            {
                                <label class="form-check-label" for="flexSwitchCheckChecked">Inactivo</label>
                            }
                        </div>
                    </div>
                </div>
            </EditForm>
        </Body>
        <Footer>
            <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Success" @onclick="sendData" Size="ButtonSize.Medium" Text="Guardar" isConfirmation="true" />
            <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Danger" @onclick="() => modalPronosticoCosecha.CloseModal()" Size="ButtonSize.Medium" Text="Cerrar" />
        </Footer>
    </PhModal>
    <div>
        <br />
        <PhTable @ref="_table" TPost="PronosticoCosechaDTO" isRefresh="true" TReturn="PronosticoCosechaDTO" Body="new PronosticoCosechaDTO()" EndPoint="@EndPointStr"
                 SearchDefinition="@(new[]
                 {
                    "anio",
                    "descripcionEstadoPronosticoCosecha"
                 })">
            <PhTableColumnHeaders>
                <PhTableColumn Style="width:40%;" Value="Anio de la Proyección" IsHeader="true" />
                <PhTableColumn Style="width:20%;" Value="Estado de la Proyección" IsHeader="true" />
            </PhTableColumnHeaders>
            <PhTableColumnValues>
                <PhTableColumn Value="@Convert.ToString(context.anio)" Style="width:40%;" />
                @if (context.estadoPronosticoCosecha == true)
                {
                    <PhTableColumn StatusColor="var(--ph-green)" Style="width:20%;" Value="@context.descripcionEstadoPronosticoCosecha" />
                }
                else
                {
                    <PhTableColumn StatusColor="var(--ph-red)" Style="width:20%;" Value="@context.descripcionEstadoPronosticoCosecha" />
                }
            </PhTableColumnValues>
            <PhTableActions>
                <PhButton Type="IntranetCalidad.Shared.Buttons.Enums.ButtonType.Primary" @onclick="@(() => Update(context))" Size="ButtonSize.Small" Text="Editar" />

            </PhTableActions>

        </PhTable>
        <PhNotification @ref="@modalNotification">
        </PhNotification>

    </div>
    <Loading @ref="loader"></Loading>
</article>


@code {
    Loading loader { get; set; } = new();

    private PhTable<PronosticoCosechaDTO, PronosticoCosechaDTO>? _table = new();
    private PhModal? modalPronosticoCosecha { get; set; } = new();
    private PhNotification modalNotification { get; set; } = new();
    PronosticoCosechaDTO pronosticoCosechaDTOForm = new PronosticoCosechaDTO();
    PronosticoCosechaDTO pronosticoCosechaDTO { get; set; } = null!;
    private string EndPointStr { get; set; } = null!;
    CatalogoDTO catalogo = new CatalogoDTO();
    IEnumerable<DetalleCatalogoDTO> Data;
    DetalleCatalogoDTO dtSelectZona = null;
    string mensajeTransaccion = string.Empty;
    string iconoMostrar = string.Empty;
    decimal valorTotal = 100;
    decimal valorEnero { get; set; }
    decimal valorFebrero { get; set; }
    decimal valorMarzo { get; set; }
    decimal valorAbril { get; set; }
    decimal valorMayo { get; set; }
    decimal valorJunio { get; set; }
    decimal valorJulio { get; set; }
    decimal valorAgosto { get; set; }
    decimal valorSeptiembre { get; set; }
    decimal valorOctubre { get; set; }
    decimal valorNoviembre { get; set; }
    decimal valorDiciembre { get; set; }


    protected override async void OnInitialized()
    {
        valorEnero = 0;
        valorFebrero = 0;
        valorMarzo = 0;
        valorAbril = 0;
        valorMayo = 0;
        valorJunio = 0;
        valorJulio = 0;
        valorAgosto = 0;
        valorSeptiembre = 0;
        valorOctubre = 0;
        valorNoviembre = 0;
        valorDiciembre = 0;

        EndPointStr = EndPoints.obtenerPronosticoCosecha;

        // var result = await _httpClient.PostAsJsonAsync<GruposDTO>
        //        (EndPointStr, grupoDTOForm);

        // _table.Data = result;

        catalogo = new CatalogoDTO();
        catalogo.nombreCatalogo = "Zonas";
        var result = await _httpClient.PostAsJsonAsync<DetalleCatalogoDTO>(EndPoints.listarCatalogo, catalogo);
        if (result is not null)
        {
            Data = result;
            StateHasChanged();
            await loader.Close();
        }
        else
        {
            mensajeTransaccion = "Error al comunicarse con el servicio";
            iconoMostrar = "error";
            await modalPronosticoCosecha.CloseModal();
            await loader.Close();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = mensajeTransaccion,
                    Icon = iconoMostrar
                });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var item = await _session.GetItemAsync<MenuDTO[]>("_userMenu");
            Validate validate = new Validate();
            if (!validate.isValid("./Maintenance/PronosticoDeCosecha", item))
            {
                _navigation.NavigateTo("./Home/Error");
            }
            await loader.Close();
        }
    }

    private async Task New()
    {
        pronosticoCosechaDTOForm = new PronosticoCosechaDTO();
        pronosticoCosechaDTOForm.estadoPronosticoCosecha = true;
        pronosticoCosechaDTOForm.codigoPronosticoCosecha = 0;
        await modalPronosticoCosecha.NewModal();
    }

    private async Task sendData()
    {
        await loader.Show();
        string mensajeTransaccion = string.Empty;
        string iconoMostrar = string.Empty;

        try
        {
            // tipoCacaoDTOForm.usuarioTransaccion = await _session.GetItemAsync<string>("codigoUsuario");
            // seccionDTOForm.equipoTransaccion = await _session.GetItemAsync<string>("equipoTransaccion");

            var postRequest = new HttpRequestMessage(HttpMethod.Post, EndPoints.grabarGrupos)
                {
                    Content = JsonContent.Create(pronosticoCosechaDTOForm)
                };
            var postResponse = await _httpClient.SendAsync(postRequest);
            if (postResponse.IsSuccessStatusCode)
            {
                var returnType = await postResponse.Content.ReadFromJsonAsync<RespuestaDTO>()!;
                if (returnType.CodigoError == 0)
                {
                    await _table!.GetDataAsync();
                    mensajeTransaccion = returnType.MensajeError;
                    iconoMostrar = "success";
                }
                else
                {
                    mensajeTransaccion = returnType.MensajeError;
                    iconoMostrar = "error";
                }
                await modalPronosticoCosecha.CloseModal();
                await loader.Close();
            }
            else
            {
                //await modalNotification.ErrorModal("Error de servicio");
                mensajeTransaccion = "Error de servicio";
                iconoMostrar = "error";
                await modalPronosticoCosecha.CloseModal();
                await loader.Close();
            }

            await Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = mensajeTransaccion,
                    Icon = iconoMostrar
                });

        }
        catch (HttpRequestException e)
        {
            await modalNotification.ErrorModal(e.Message.ToString());
            await modalPronosticoCosecha.CloseModal();
            await loader.Close();
        }
    }

    private async Task Update(PronosticoCosechaDTO pronosticoCosechaDTO)
    {
        pronosticoCosechaDTOForm = pronosticoCosechaDTO;
        await modalPronosticoCosecha.UpdateModal();
        StateHasChanged();
    }

    public async Task ValueChange(DetalleCatalogoDTO? item)
    {
        if (item != null)
        {
            dtSelectZona = item;
            PronosticoCosechaDTO deta = new PronosticoCosechaDTO();
            if (dtSelectZona != null)
            {
                await loader.Show();
                try
                {
                    deta.codigoZona = dtSelectZona.codigoCatalogo.ToString();
                    pronosticoCosechaDTOForm.codigoZona = deta.codigoZona;
                    pronosticoCosechaDTO = deta;
                    loadTable();
                }
                catch (Exception ex)
                {

                    deta = new PronosticoCosechaDTO();
                    pronosticoCosechaDTO = deta;
                    loadTable();
                }

            }
            else
            {
                deta.codigoPronosticoCosecha = 0;
                pronosticoCosechaDTO = deta;
                loadTable();
                pronosticoCosechaDTO = null;
            }
        }

    }

    private async void loadTable()
    {
        _table.Body = pronosticoCosechaDTO;
        await _table!.GetDataAsync();
        await loader.Close();
    }

    #region Meses

    private void CambioValorEnero(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if(valorTotal==100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if(e.Value.ToString()!=valorEnero.ToString())
        {
            valorEnero = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorEnero;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorFebrero(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorFebrero.ToString())
        {
            valorFebrero = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorFebrero;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorMarzo(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorMarzo.ToString())
        {
            valorMarzo = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorMarzo;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorAbril(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorAbril.ToString())
        {
            valorAbril = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorAbril;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorMayo(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorMayo.ToString())
        {
            valorMayo = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorMayo;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorJunio(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorJunio.ToString())
        {
            valorJunio = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorJunio;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorJulio(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorJulio.ToString())
        {
            valorJulio = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorJulio;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorAgosto(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorAgosto.ToString())
        {
            valorAgosto = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorAgosto;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorSeptiembre(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorSeptiembre.ToString())
        {
            valorSeptiembre = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorSeptiembre;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorOctubre(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorOctubre.ToString())
        {
            valorOctubre = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorOctubre;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorNoviembre(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorNoviembre.ToString())
        {
            valorNoviembre = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorNoviembre;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }
    private void CambioValorDiciembre(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (valorTotal == 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

        if (e.Value.ToString() != valorDiciembre.ToString())
        {
            valorDiciembre = decimal.Parse(e.Value.ToString());
            valorTotal = valorTotal + valorDiciembre;
        }

        if (valorTotal > 100)
        {
            Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "#025833",
                    Title = "Intranet Calidad",
                    Text = "Ya se ha ingresado el porcentaje total para el año, no puede ser mayor al 100%",
                    Icon = "success"
                });
        }

    }

    #endregion
}
